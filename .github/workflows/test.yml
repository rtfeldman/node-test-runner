name: Test

on:
  push:
    branches:
      - 'master'
  pull_request:

jobs:
  main:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # macOS-13 is the latest macOS version that is x86.
        # Node.js 12, 14 and 16 arenâ€™t support on the arm64 runners.
        os: [ubuntu-latest, macOS-13, windows-latest]
        node-version: [12.x, 14.x, 16.x, 18.x, 20.x, 22.x]
        # Also have a test on macOS arm64.
        include:
          - os: macOS-latest
            node-version: 22.x

    env:
      ELM_HOME: '${{ github.workspace }}/elm-stuff/elm-home'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '${{ matrix.node-version }}'

      - name: Cache node_modules
        id: cache-node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node_modules-${{ matrix.os }}-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}

      - name: Cache ELM_HOME
        uses: actions/cache@v4
        with:
          path: '${{ env.ELM_HOME }}'
          key: elm-${{ matrix.os }}-${{ hashFiles('elm-tooling.json', 'elm/**/elm.json', 'example-*/**/elm.json', 'tests/**/elm.json') }}

      - name: npm ci
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        run: npm ci
        env:
          NO_ELM_TOOLING_INSTALL: 1

      - name: install mocha 9
        if: steps.cache-node_modules.outputs.cache-hit != 'true' && (matrix.node-version == '12.x' || matrix.node-version == '14.x' || matrix.node-version == '16.x')
        run: npm install mocha@9

      - name: elm-tooling install
        run: npx --no-install elm-tooling install

      - name: Mocha
        run: npx --no-install mocha tests

      - name: elm-test
        run: npm run elm-test
